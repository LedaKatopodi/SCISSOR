"Silent")
group_mut = as.list(NULL);
group_mut[[1]] = which(mut_types=="Splice_Site")
group_mut[[2]] = which(mut_types=="Nonsense_Mutation") # nonsense
group_mut[[3]] = c(which(mut_types=="In_Frame_Ins"),which(mut_types=="Frame_Shift_Del"),
which(mut_types=="In_Frame_Del"),which(mut_types=="Frame_Shift_Ins")) # frame shift
group_mut[[4]] = which(mut_types=="Silent") # silent
group_mut[[5]] = which(!mut_types %in% impt.mutations)  # the rest
group_mut_types = c("Splice_site","Nonsense","Frame_shift","Silent","Other")
############################
plot(1,type="n",axes=F)
box()
title(GeneName,cex=1.5)
for (g in 1:length(group_mut)){
curmut.id = c()
if (nrow(mutation.info)>0) {
for (mt in group_mut[[g]]) {
curmut.id = c(curmut.id,unique(mutation.info[mutation.info$mut_class==mut_types[mt],1]))
}
} else {
curmut.id = NULL
}
legend(x=0.5,y=1.5-0.1*g,bty="n",
legend=c(paste("#",group_mut_types[g],"=",length(curmut.id),
" | # significant =",
length(BeorNot.hy(curmut.id,outliers)$yes))))
}
plot_ScissorSC(object=ScissorOutput,SCids=c(351),
subject.name=sample.barcode,minfo=mutation.info)
if (outlier.plot) {
plot_ScissorSC(object=ScissorOutput,SCids=ScissorOutput$outliers1[1:3],
subject.name=sample.barcode,minfo=mutation.info)
plot_ScissorSC(object=ScissorOutput,SCids=ScissorOutput$outliers2[1:3],
subject.name=sample.barcode,minfo=mutation.info)
}
# save(outliers1=outliers1,outliers2=outliers2,splicesite=splicesite.id,
#      file=paste0(tumor.local,GeneName,"_Scissor_outliers.RData"))
outlier.plot=TRUE
if (outlier.plot) {
plot_ScissorSC(object=ScissorOutput,SCids=ScissorOutput$outliers1[1:3],
subject.name=sample.barcode,minfo=mutation.info)
plot_ScissorSC(object=ScissorOutput,SCids=ScissorOutput$outliers2[1:3],
subject.name=sample.barcode,minfo=mutation.info)
}
119/(119+66)
BAMs=c("~/Data/HNSC/bamfiles/00f625f1-4889-4655-b985-827c7b1b9a3b/UNCID_1487723.9cceecc5-683f-487b-9130-fab25e8c7d3c.sorted_genome_alignments.bam")
CaseIDs=c("TCGA-IQ-7632-01A")
data.frame(BAMs=BAMs,CaseIDs=CaseIDs)
BAMs=c("~/Data/HNSC/bamfiles/00f625f1-4889-4655-b985-827c7b1b9a3b/UNCID_1487723.9cceecc5-683f-487b-9130-fab25e8c7d3c.sorted_genome_alignments.bam",
"~/Data/HNSC/bamfiles/d9058158-21aa-4870-b4de-a2a8fa7ed848/UNCID_1505452.85034d8f-c10c-4db2-ade2-f26ea7cf2d95.sorted_genome_alignments.bam")
CaseIDs=c("TCGA-IQ-7632-01A","TCGA-BA-4075-01A")
BAMmanifest=data.frame(CaseIDs=CaseIDs,BAMs=BAMs)
BAMmanifest
manifest
library(Rsamtools)
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
tmpDepth[order(tmpDepth$pos),]
}
exon="chr19:8509803-8509995,8520289-8520458,8527413-8527465,8528381-8528388,8528477-8528570,8530208-8530399,8531119-8531272,8532419-8532468,8533658-8533718,8536210-8536311,8538548-8538592,8539051-8539128,8548042-8548095,8550487-8551289,8551908-8551959,8552186-8553994:+"
test=read_aBAM(BAM=BAMs[1],exon=exon)
test=read_aBAM(BAM=BAMs[1],exon=exon)
head(test)
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
pileup=tmpDepth[order(tmpDepth$pos),]
rownames(pileup)=1:dim(pileup)[1]
rm(tmpDepth,res)
pileup
}
rm(test)
test=read_aBAM(BAM=BAMs[1],exon=exon)
head(test)
tail(test)
library(SCISSOR)
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=NULL) ;
ep.new
find.exon.hy
chr
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
strtend
strnd
df
ep.new$ep
strtend
as.numeric(strtend)
as.matrix(strtend)
as.matrix(as.numeric(strtend))
matrix(as.numeric(strtend),ncol=2)
strtend
ep.new$ep
ep.new$ep[,2]-ep.new$ep[,1]
intron.len = ceiling(len.intron.hy(exon=exon)*0.5);
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=intron.len) ;
ep.new$ep
ep.new$ep[,2]-ep.new$ep[,1]
ep.new$ep[,4]-ep.new$ep[,3]
intron.len
strtend.num=matrix(as.numeric(strtend),ncol=2)
strtend.num[,1]-ep.new$ep[,2]-ep.new$ep[,1]
cbind(strtend.num[,1]-ep.new$ep[,2]-ep.new$ep[,1],strtend.num,strtend.num[,2]+ep.new$ep[,4]-ep.new$ep[,3])
ep.new$ep
ep.new$ep[,2]-ep.new$ep[,1]
cbind(strtend.num[,1]-(ep.new$ep[,2]-ep.new$ep[,1]),strtend.num,strtend.num[,2]+(ep.new$ep[,4]-ep.new$ep[,3]))
newGAM=cbind(strtend.num[,1]-(ep.new$ep[,2]-ep.new$ep[,1]),strtend.num,strtend.num[,2]+(ep.new$ep[,4]-ep.new$ep[,3]))
newGAM
GAM=cbind(strtend.num[,1]-(ep.new$ep[,2]-ep.new$ep[,1]),strtend.num,strtend.num[,2]+(ep.new$ep[,4]-ep.new$ep[,3]))
apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-"))
apply(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=",")
paste(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=",")
exon
chr
strnd
newexon=paste0(chr,":",paste(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=","),":",strnd)
newexon
exon
c.GAM=ep.new$ep
c.GAM
c.GAM=ep.new$ep
GAM=cbind(strtend.num[,1]-(c.GAM[,2]-c.GAM[,1]),strtend.num,strtend.num[,2]+(c.GAM[,4]-c.GAM[,3]))
newexon=paste0(chr,":",paste(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=","),":",strnd)
exon
newexon
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
pileup=tmpDepth[order(tmpDepth$pos),]
rownames(pileup)=1:dim(pileup)[1]
rm(tmpDepth,res)
pileup
}
test=read_aBAM(BAM=BAMs[1],exon=newexon)
head(test)
tail(test)
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
pileup=tmpDepth[order(tmpDepth$pos),]
rownames(pileup)=1:dim(pileup)[1]
rm(tmpDepth,res)
pileup[,2]
}
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
length(allPos)
length(df)
df
nrow(newGAM)
allPos = unlist(sapply(1:nrow(newGAM), function(x) GAM[x,1]:GAM[x,4]))
length(allPos)
c.GAM
allPos = unlist(sapply(1:nrow(newGAM), function(x) newGAM[x,1]:newGAM[x,4]))
length(allPos)
head(allPos)
tail(allPos)
GAM
tail(test)
dim(test)
test=read_aBAM(BAM=BAMs[1],exon=newexon)
dim(test)
length(test)
BAM=BAMs[1]
exon="chr19:8509803-8509995,8520289-8520458,8527413-8527465,8528381-8528388,8528477-8528570,8530208-8530399,8531119-8531272,8532419-8532468,8533658-8533718,8536210-8536311,8538548-8538592,8539051-8539128,8548042-8548095,8550487-8551289,8551908-8551959,8552186-8553994:+"
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
strtend.num=matrix(as.numeric(strtend),ncol=2)
intron.len = ceiling(len.intron.hy(exon=exon)*0.5);
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=intron.len) ;
c.GAM=ep.new$ep
GAM=cbind(strtend.num[,1]-(c.GAM[,2]-c.GAM[,1]),strtend.num,strtend.num[,2]+(c.GAM[,4]-c.GAM[,3]))
newexon=paste0(chr,":",paste(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=","),":",strnd)
exon
newexon
allPos = unlist(sapply(1:nrow(newGAM), function(x) newGAM[x,1]:newGAM[x,4]))
read_aBAM = function(BAM,Exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(Exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(Exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(Exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
pileup=tmpDepth[order(tmpDepth$pos),]
rownames(pileup)=1:dim(pileup)[1]
rm(tmpDepth,res)
pileup[,2]
}
test=read_aBAM(BAM=BAMs[1],Exon=newexon)
length(test)
c.GAM
intron.len = ceiling(len.intron.hy(exon=newexon)*0.5);
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=intron.len) ;
ep.new$ep
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=0) ;
ep.new$ep
ep.new = find.exon.hy(newexon,is.intron=TRUE,num.intron=0) ;
ep.new$ep
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=0) ;
ep.new$ep
test=read_aBAM(BAM=BAMs[1],Exon=exon)
length(test)
BAM=BAMs[1]
Exon=exon
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(Exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(Exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(Exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
# res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam())
length(res$count)
df
exon
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
head(tmpDepth)
head(pileup)
outpileup=tmpDepth[order(tmpDepth$pos),]
dim(outpileup)
head(outpileup)
length(unique(outpileup$pos))
length(allPos)
ep.new$ep
allPos[!allPos %in% res$pos]
cbind(pos=allPos[!allPos %in% res$pos],count=0)
dim(res)
head(res)
length(unique(res$pos))
duplicated(res)[1]
which(duplicated(res)==1)[1]
which(duplicated(res)==1)
which(duplicated(res$pos)==1)
which(duplicated(res$pos)==1)[1:10]
res[which(duplicated(res$pos)==1)[1:10],]
res[which(res$pos=="8509882"),]
duplicated(res$pos)==0
res = res[duplicated(res$pos)==0,]
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
dim(tmpDepth)
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
read_aBAM = function(BAM,Exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(Exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(Exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(Exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
# res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam())
res = res[duplicated(res$pos)==0,]
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
pileup[,2]
}
test=read_aBAM(BAM=BAMs[1],Exon=exon)
read_aBAM = function(BAM,Exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(Exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(Exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(Exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
# res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam())
res = res[duplicated(res$pos)==0,]
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
outpileup[,2]
}
test=read_aBAM(BAM=BAMs[1],Exon=exon)
length(test)
ep.new$ep
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
# res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(...))
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam())
res = res[duplicated(res$pos)==0,]
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
outpileup[,2]
}
test=read_aBAM(BAM=BAMs[1],exon=exon)
length(test)
head(test)
tail(test)
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
strtend.num=matrix(as.numeric(strtend),ncol=2)
intron.len = ceiling(len.intron.hy(exon=exon)*0.5);
ep.new = find.exon.hy(exon,is.intron=TRUE,num.intron=intron.len) ;
c.GAM=ep.new$ep
GAM=cbind(strtend.num[,1]-(c.GAM[,2]-c.GAM[,1]),strtend.num,strtend.num[,2]+(c.GAM[,4]-c.GAM[,3]))
newexon=paste0(chr,":",paste(apply(GAM[,c(1,4)],1,function(x) paste(x,collapse="-")),collapse=","),":",strnd)
exon
newexon
allPos = unlist(sapply(1:nrow(GAM), function(x) GAM[x,1]:GAM[x,4]))
length(allPos)
tail(allPos)
test=sapply(BAMs,read_aBAM)
test=sapply(BAMs,function(x) read_aBAM(BAM=x,exon=newexon))
dim(test)
GAM
c.GAM
?pileup
head(test)
colnames(test)=caseIDs
CaseIDs=c("TCGA-IQ-7632-01A","TCGA-BA-4075-01A")
colnames(test)=CaseIDs
head(test)
rownames(test)=allPos
head(test)
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,...))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F))
dim(res)
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
outpileup[,2]
}
test=sapply(BAMs,function(x) read_aBAM(BAM=x,exon=newexon))
dim(test)
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,...))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
outpileup[,2]
}
test=sapply(BAMs,function(x) read_aBAM(BAM=x,exon=newexon))
head(test)
dim(test)
length(test)
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F))
dim(res)
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
dim(outpileup)
length(allPos)
exon
newexon
duplicated(res$pos)
which(duplicated(res$pos)==1)
res$pos[which(duplicated(res$pos)==1)]
res[which(res$pos=="8553990")]
res[which(res$pos=="8553990"),]
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,distinguish_nucleotides=F))
res$pos[which(duplicated(res$pos)==1)]
read_aBAM = function(BAM,exon=NULL,...) {
bf = BamFile(BAM)
## prepare GRanges
chr = strsplit(exon,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(exon,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(exon,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,distinguish_nucleotides=F))
## pileup does not report zero coverage. manually put zero coverage to the output.
## will be deprecated or replaced to sth
allPos = unlist(sapply(1:length(df), function(x) data.frame(df)[x,2]:data.frame(df)[x,3]))
tmpDepth = rbind(res[,c("pos","count")],cbind(pos=allPos[!allPos %in% res$pos],count=0))
outpileup=tmpDepth[order(tmpDepth$pos),]
rownames(outpileup)=1:dim(outpileup)[1]
rm(tmpDepth,res)
outpileup[,2]
}
test=sapply(BAMs,function(x) read_aBAM(BAM=x,exon=newexon))
dim(test)
length(allPos)
allPos = unlist(sapply(1:nrow(GAM), function(x) GAM[x,1]:GAM[x,4]))
length(allPos)
tail(allPos)
dim(test)
colnames(test)=CaseIDs
rownames(test)=allPos
head(test)
tail(test)
c.GRange=ep.new$ep
res$which_label[1:10]
