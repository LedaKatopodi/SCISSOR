s1 = rnorm(n,mean=0,sd=0.5);
s1 = c(s1,c(1,1.5,1.6,1.8,2,2.5,3,3,2.9,2,2.5,3.5,4,5,6))
mad(s1)
s2 = rnorm(length(s1),mean=0,sd=0.4);
out = c(0,2.5)
X0 = rbind(s1,s2);
X = cbind(out,X0);
X[2,38]=0.4
X[2,39]=-0.4
X[2,27]=-0.4
X[2,17]=0.4
X[2,42]=-0.1
#X[1,which(X[1,]<(-1))] = 0
which(X[1,]>2.5)
which(X[1,]<(-0.8))
colmat=rep("black",ncol(X))
colmat[1]="red"
colmat[c(44,45,46)]="blue"
pchmat=rep(4,ncol(X))
pchmat[1]=19
pchmat[c(44,45,46)]=19
cexmat=rep(1,ncol(X))
cexmat[c(1,c(44,45,46))]=1.2
pdf(4,4,file=paste0("toydata_skewed.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,9),high=0.6)
dev.off()
### Modified
pdf(4,4,file=paste0("toydata_skewed_modified_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=0.16) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(1.5,-1.5,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
set.seed(0)
results=get_PO(X=X,NormCutoff=0.7) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,9),high=0.6)
dev.off()
set.seed(2);
n = 30;
s1 = rnorm(n,mean=0,sd=0.5);
s1 = c(s1,c(1,1.5,1.6,1.8,2,2.5,3,3,2.9,2,2.5,3.5,4,5,6))
mad(s1)
s2 = rnorm(length(s1),mean=0,sd=0.4);
out = c(0,2)
X0 = rbind(s1,s2);
X = cbind(out,X0);
X[2,38]=0.4
X[2,39]=-0.4
X[2,27]=-0.4
X[2,17]=0.4
X[2,42]=-0.1
#X[1,which(X[1,]<(-1))] = 0
which(X[1,]>2.5)
which(X[1,]<(-0.8))
colmat=rep("black",ncol(X))
colmat[1]="red"
colmat[c(44,45,46)]="blue"
pchmat=rep(4,ncol(X))
pchmat[1]=19
pchmat[c(44,45,46)]=19
cexmat=rep(1,ncol(X))
cexmat[c(1,c(44,45,46))]=1.2
pdf(4,4,file=paste0("toydata_skewed.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,9),high=0.6)
dev.off()
### Modified
pdf(4,4,file=paste0("toydata_skewed_modified_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=0.16) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(1.5,-1.5,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
set.seed(0)
results=get_PO(X=X,NormCutoff=0.7) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,9),high=0.6)
dev.off()
results=get_PO(X=X,NormCutoff=0.16) # 10 vs. 0.16
results=get_PO(X=X,NormCutoff=0.2) # 10 vs. 0.16
set.seed(0)
results=get_PO(X=X,NormCutoff=0.2) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-4,4),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(1.5,-1.5,"MOD",col="blue")
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-6,7),high=0.6)
pdf(4,4,file=paste0("toydata_skewed.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
dev.off()
set.seed(2);
n = 30;
s1 = rnorm(n,mean=0,sd=0.5);
s1 = c(s1,c(1,1.5,1.6,1.8,2,2.5,3,3,2.9,2,2.5,3.5,4,5,6))
mad(s1)
s2 = rnorm(length(s1),mean=0,sd=0.4);
out = c(0,2)
X0 = rbind(s1,s2);
X = cbind(out,X0);
X[2,38]=0.4
X[2,39]=-0.4
X[2,27]=-0.4
X[2,17]=0.4
X[2,42]=-0.1
#X[1,which(X[1,]<(-1))] = 0
which(X[1,]>2.5)
which(X[1,]<(-0.8))
colmat=rep("black",ncol(X))
colmat[1]="red"
colmat[c(44,45,46)]="blue"
pchmat=rep(4,ncol(X))
pchmat[1]=19
pchmat[c(44,45,46)]=19
cexmat=rep(1,ncol(X))
cexmat[c(1,c(44,45,46))]=1.2
pdf(4,4,file=paste0("toydata_skewed.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-4,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
results=get_PO(X=X,NormCutoff=10) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_original_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-4,7),high=0.6)
dev.off()
### Modified
pdf(4,4,file=paste0("toydata_skewed_modified_spurious.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
set.seed(0)
results=get_PO(X=X,NormCutoff=0.2) # 10 vs. 0.16
intj=46
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="blue")
# text(1,-3,"MOD",col="red")
text(1.5,-1.5,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_spurious_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-4,7),high=0.6)
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
set.seed(0)
results=get_PO(X=X,NormCutoff=0.7) # 10 vs. 0.16
intj=1
a=results$directions[,intj]
plot(X[1,],X[2,],cex=cexmat,pch=pchmat,col=colmat,ylim=c(-3,3),xlim=c(-3,7),
xlab=NA,ylab=NA)
abline(v=0,lty=2)
abline(h=0,lty=2)
abline(a=0,b=a[2]/a[1],col="red")
text(1,-3,"MOD",col="red")
# text(6,1,"MOD",col="blue")
dev.off()
pdf(4,4,file=paste0("toydata_skewed_modified_outlier_PO.pdf"))
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(results$NPS[,intj],colmat=colmat,pch=pchmat,cex=cexmat,xlim=c(-4,7),high=0.6)
dev.off()
x=matrix(1:10,nrow=2)
x
dim(x)
rowMeans(x)
?zero.make
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
install.packages(TxDb.Hsapiens.UCSC.hg19.knownGene)
install.packages("TxDb.Hsapiens.UCSC.hg19.knownGene")
install.packages("refGenome")
install.packages("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
GENE <- "TP53"
geneid <- select(org.Hs.eg.db, keys=GENE, columns=c("ENTREZID"),keytype="SYMBOL")
geneid <- select(txdb, keys=GENE, columns=c("ENTREZID"),keytype="SYMBOL")
head(txdb)
ebg <- exonsBy(txdb, by="gene") ## Once loaded, can be used at multiple instances
ebg
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
# library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(org.Hs.eg.db)
geneid <- select(org.Hs.eg.db, keys=GENE, columns=c("ENTREZID"),keytype="SYMBOL")
geneid
ebg <- exonsBy(txdb, by="gene") ## Once loaded, can be used at multiple instances
data.frame(reduce(ebg[which(names(ebg)==as.character(geneid[2]))]))
exons = data.frame(reduce(ebg[which(names(ebg)==as.character(geneid[2]))]))
locus
exondata = data.frame(reduce(ebg[which(names(ebg)==as.character(geneid[2]))]))
rm(exons)
paste(exondata[,44],exondata[,5],sep="-")
paste(exondata[,4],exondata[,5],sep="-")
paste(paste(exondata[,4],exondata[,5],sep="-"),sep=",")
paste(paste(exondata[,4],exondata[,5],sep="-"),collapse=",")
paste(exondata[1,3],":",paste(paste(exondata[,4],exondata[,5],sep="-"),collapse=","),sep="")
paste(exondata[1,3],paste(paste(exondata[,4],exondata[,5],sep="-"),collapse=","),exondata[1,7],collapse=":")
paste(exondata[1,3],paste(paste(exondata[,4],exondata[,5],sep="-"),collapse=","),exondata[1,7],sep=":")
## 2-2. better
BiocManager::install("EnsDb.Hsapiens.v75")
library(EnsDb.Hsapiens.v75) # hg19
GENE <- "TP53"
geneid <- select(EnsDb.Hsapiens.v75, keys=GENE, column=c("GENEID","SYMBOL","ENTREZID"),keytype="SYMBOL")
geneid ## GENE_ID LRG_321???
#ESNG...
data.frame(reduce(ebg[which(names(ebg)==geneid[1,1])]))
geneid[1,1]
library(refGenome)
library(GenomicRanges)
ens <- ensemblGenome()
read.gtf(ens, "/path/to/Homo_sapiens.GRCh37.97.gtf", useBasedir=FALSE) ## read.gtf does not accept gtf.gz: gunzip it.
read.gtf(ens, "/path/to/Homo_sapiens.GRCh38.97.gtf", useBasedir=FALSE) ## read.gtf does not accept gtf.gz: gunzip it.
ens <- ensemblGenome()
ens
library(GenomicRanges)
library(refGenome)
ens <- ensemblGenome()
ens
paste(exondata$seqnames[1],paste(paste(exondata$start,exondata$end,sep="-"),collapse=","),exondata$strand[1],sep=":")
exondata
nexon = dim(exondata)[1]
nexon
(exondata$start[2:nexon] < exondata$end[1:(nexon-1)])
source
geneid ## GENE_ID LRG_321???
#ESNG...
data.frame(reduce(ebg[which(names(ebg)==geneid[1,1])]))
geneid$GENEID
rm(list=ls())
ls()
Gene="TP53"
hg.ref="hg19"
if (hg.ref=="hg19") {
txdb.type = "TxDb.Hsapiens.UCSC.hg19.knownGene"
} else {
txdb.type = "TxDb.Hsapiens.UCSC.hg38.knownGene"
}
txdb.type
require(txdb.type)
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb.type
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
require(org.Hs.eg.db)
geneid <- select(org.Hs.eg.db, keys=Gene, columns=c("ENTREZID"),keytype="SYMBOL")
geneid
ebg <- exonsBy(txdb, by="gene") ## Once loaded, can be used at multiple instances
exondata = data.frame(reduce(ebg[which(names(ebg)==as.character(geneid[2]))]))
exondata
# nexon = dim(exondata)[1]
# (exondata$start[2:nexon] < exondata$end[1:(nexon-1)])
exons = paste(exondata$seqnames[1],paste(paste(exondata$start,exondata$end,sep="-"),collapse=","),exondata$strand[1],sep=":")
exons
rm(list=ls())
Gene="TP53"
hg.ref="hg19"
if (hg.ref=="hg19") {
txdb.type = "TxDb.Hsapiens.UCSC.hg19.knownGene"
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
} else {
txdb.type = "TxDb.Hsapiens.UCSC.hg38.knownGene"
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
}
require(org.Hs.eg.db)
txdb <- txdb.type
geneid <- select(org.Hs.eg.db, keys=Gene, columns=c("ENTREZID"),keytype="SYMBOL")
geneid
ebg <- exonsBy(txdb, by="gene") ## Once loaded, can be used at multiple instances
txdb
rm(list=ls())
Gene="TP53"
hg.ref="hg19"
require(org.Hs.eg.db)
if (hg.ref=="hg19") {
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
} else {
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene
}
geneid <- select(org.Hs.eg.db, keys=Gene, columns=c("ENTREZID"),keytype="SYMBOL")
geneid
ebg <- exonsBy(txdb, by="gene") ## Once loaded, can be used at multiple instances
exondata = data.frame(reduce(ebg[which(names(ebg)==as.character(geneid[2]))]))
exondata
# nexon = dim(exondata)[1]
# (exondata$start[2:nexon] < exondata$end[1:(nexon-1)])
exons = paste(exondata$seqnames[1],paste(paste(exondata$start,exondata$end,sep="-"),collapse=","),exondata$strand[1],sep=":")
exons
geneid
as.character(geneid[2])
source('~/Dropbox/Research/hyochoi_github/build_gaf.R', echo=TRUE)
build_gaf(Gene="TP53",hg.ref="hg19)
build_gaf(Gene="TP53",hg.ref="hg19")
hg.ref="hg19"
match.arg(hg.ref, choices=c("hg19","hg38"))
source('~/Dropbox/Research/hyochoi_github/build_gaf.R', echo=TRUE)
build_gaf(Gene="TP53",hg.ref="hg19")
build_gaf(Gene="TP53")
?system.file
#########################################################
####### Can we extract strand-specific pileup? ##########
#########################################################
#regions = "chr17:7565097-7565332,7569404-7569562,7571720-7573008,7573927-7574033,7576525-7576657,7576853-7576926,7577019-7577155,7577499-7577608,7577851-7578289,7578371-7578811,7579312-7579590,7579700-7579940,7580643-7580745,7590695-7590868:-"
regions = "chr17:7571720-7573008,7573927-7574033:-"
## prepare GRanges
chr = strsplit(regions,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(regions,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(regions,":")[[1]][3]
regions = "chr17:7571720-7573008,7573927-7574033:-"
bamFile ="~/Desktop/HNSC_BAM/aec32216-0015-43ca-a460-f73640fd7250/UNCID_1497626.b8c98129-fc39-4a2f-966e-041474135925.sorted_genome_alignments.bam"
bf = BamFile(bamFile)
"~/Desktop/HNSC_BAM/aec32216-0015-43ca-a460-f73640fd7250/UNCID_1497626.b8c98129-fc39-4a2f-966e-041474135925.sorted_genome_alignments.bam"
library(Rsamtools)
regions = "chr17:7571720-7573008,7573927-7574033:-"
bamFile ="~/Desktop/HNSC_BAM/aec32216-0015-43ca-a460-f73640fd7250/UNCID_1497626.b8c98129-fc39-4a2f-966e-041474135925.sorted_genome_alignments.bam"
bf = BamFile(bamFile)
chr = strsplit(regions,":")[[1]][1]
strtend = do.call(rbind,strsplit(strsplit(strsplit(regions,":")[[1]][2],",")[[1]],"-"))
strnd = strsplit(regions,":")[[1]][3]
df = GRanges(chr,IRanges(start=as.numeric(strtend[,1]), end=as.numeric(strtend[,2])),strnd)
df
s_param = ScanBamParam(which=df, what=c("pos"))
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res0 = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,distinguish_nucleotides=F,...))
s_param
# p_param = PileupParam(max_depth=1000, min_base_quality = 0, min_mapq = 0, min_nucleotide_depth = 0, min_minor_allele_depth = 0, distinguish_strands = FALSE, distinguish_nucleotides = FALSE, ignore_query_Ns = FALSE, include_deletions = FALSE, include_insertions = FALSE, left_bins = NULL, query_bins = NULL,  cycle_bins = NULL)
res0 = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=F,distinguish_nucleotides=F))
dim(res0)
head(res0)
res0[1:50]
res0[1:50,]
res1 = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=T,distinguish_nucleotides=F))
cbind(res0[1:50,],res1[1:50,])
head(res1[which(res1$strand=="+"),])
head(res1[which(res1$strand=="-"),])
res0 = pileup(bf, scanBamParam=s_param, pileupParam=PileupParam(distinguish_strands=T,distinguish_nucleotides=F))
res1 = res1[which(res0$strand=="-"),]
res1 = res1[which(res0$strand=="+"),]
res2 = res1[which(res0$strand=="-"),]
