kdeplot.hy((tmp2-median(tmp2))/mad(tmp2),indlist=case)
j
j = j+1
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
(tmp1os[case]>=tmp2os[case])
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
case=which(case.barcodes=="TCGA-CV-6940-01A")
case
par(mfrow=c(4,3),mar=c(2,2,2,2))
j = 1
t1 = 1
t2 = nrow(X)
t = 2500
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1,t,t2),col=c("red","blue","red"))
tmp1 = colSums(X[1:t,])
tmp2 = colSums(X[(t+1):t2,])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
t1
t2
j = j+1
if (tmp1os[case]>=tmp2os[case]) {
t1 = c(t1,t1[j-1])
t2 = c(t2,t[j-1])
} else {
t1 = c(t1,t[j-1])
t2 = c(t2,t2[j-1])
}
t = c(t,floor((t1[j]+t2[j])*0.5))
plot_pileup(Pileup=ScissorOutput$normalizedData,case=case,Ranges=geneRanges)
abline(v=c(t1[j],t[j],t2[j]),col=c("red","blue","red"))
tmp1 = colSums(X[t1[j]:t[j],])
tmp2 = colSums(X[(t[j]+1):t2[j],])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
tmp2os = (tmp2-median(tmp2))/mad(tmp2)
kdeplot.hy(tmp1os,indlist=case)
kdeplot.hy(tmp2os,indlist=case)
geneRanges
case=which(case.barcodes=="TCGA-CV-6940-01A")
for (i in 1:nrow(geneRanges$lRanges)) {
tmp1 =colSums(X[c(geneRanges$lRanges[i,2]:geneRanges$lRanges[i,3]),])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
kdeplot.hy(tmp1os,indlist=case)
}
for (i in 1:nrow(geneRanges$lRanges)) {
tmp1 =colSums(X[c(geneRanges$lRanges[i,2]:geneRanges$lRanges[i,3]),])
tmp1os = (tmp1-median(tmp1))/mad(tmp1)
kdeplot.hy(tmp1os,indlist=case,main=i)
}
case
n
case=which(case.barcodes=="TCGA-CV-6940-01A")
nexon = nrow(geneRanges$lRanges)
ncase = ncol(X)
exonOS = matrix(0,nrow=nexon,ncol=ncase)
intronOS = matrix(0,nrow=(nexon-1),ncol=ncase)
for (i in 1:nexon) {
tmp1 =colSums(X[c(geneRanges$lRanges[i,2]:geneRanges$lRanges[i,3]),])
exonOS[i,] = (tmp1-median(tmp1))/mad(tmp1)
}
for (i in 1:(nexon-1)) {
tmp1 =colSums(X[c((geneRanges$lRanges[i,2]+1):(geneRanges$lRanges[i+1,2]-1)),])
intronOS[i,] = (tmp1-median(tmp1))/mad(tmp1)
}
kdeplot.hy(apply(exonOS,2,max))
kdeplot.hy(apply(intronOS,2,max))
for (i in 1:(nexon-1)) {
tmp1 =colSums(X[c((geneRanges$lRanges[i,3]+1):(geneRanges$lRanges[i+1,2]-1)),])
intronOS[i,] = (tmp1-median(tmp1))/mad(tmp1)
}
kdeplot.hy(apply(intronOS,2,max))
case = order(apply(exonOS,2,max),decreasing=T)[1]
case
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
kdeplot.hy(exonOS[,case])
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
res=get_PO(X=exonOS)
res$OS
res$OS[case]
exonOS[,case]
res=get_PO(X=rbind(exonOS,intronOS))
res$OS[case]
res=get_PO(X=rbind(exonOS,intronOS),NormCutoff=5)
res$OS[case]
res=get_PO(X=rbind(exonOS,intronOS),NormCutoff=3)
res$OS[case]
res$directions[,case]
res$directions[,case]^2
round(res$directions[,case]^2,digits=3)
geneRanges$lRanges
res=get_PO(X=rbind(exonOS,intronOS),NormCutoff=10)
res$OS[case]
round(res$directions[,case]^2,digits=3)
res=get_PO(X=rbind(exonOS,intronOS),NormCutoff=20)
res$OS[case]
round(res$directions[,case]^2,digits=3)
res=get_PO(X=rbind(exonOS,intronOS),NormCutoff=3)
res$OS[case]
round(res$directions[,case]^2,digits=3)
which(apply(intronOS,2,max)>10)
which(apply(exonOS,2,max)>10)
kdeplot.hy(apply(exonOS,2,max))
case = order(apply(exonOS,2,max),decreasing=T)[1]
case
which.max(exonOS[,case])
which.max(abs(exonOS[,case]))
case
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=geneRanges$lRanges[which.max(abs(exonOS[,case])),c(2,3)])
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
i = which.max(abs(exonOS[,case]))
kdeplot.hy(exonOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
case = order(apply(exonOS,2,max),decreasing=T)[2]
i = which.max(abs(exonOS[,case]))
kdeplot.hy(exonOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
case = order(apply(exonOS,2,max),decreasing=T)[3]
i = which.max(abs(exonOS[,case]))
kdeplot.hy(exonOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
case = order(apply(exonOS,2,max),decreasing=T)[4]
i = which.max(abs(exonOS[,case]))
kdeplot.hy(exonOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=geneRanges$lRanges[i,c(2,3)],col="red")
case = order(apply(intronOS,2,max),decreasing=T)[4]
i = which.max(abs(intronOS[,case]))
kdeplot.hy(intronOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=c(geneRanges$lRanges[i,3],geneRanges$lRanges[(i+1),2]),col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=c(geneRanges$lRanges[i,3],geneRanges$lRanges[(i+1),2]),col="red")
for (j in 1:30) {
case = order(apply(intronOS,2,max),decreasing=T)[j]
i = which.max(abs(intronOS[,case]))
kdeplot.hy(intronOS[i,],indlist=case)
plot_pileup(Pileup=ScissorOutput$logData,case=case,Ranges=geneRanges,logcount=ScissorOutput$logshiftVal)
abline(v=c(geneRanges$lRanges[i,3],geneRanges$lRanges[(i+1),2]),col="red")
plot_pileup(Pileup=X0,case=case,Ranges=geneRanges)
abline(v=c(geneRanges$lRanges[i,3],geneRanges$lRanges[(i+1),2]),col="red")
}
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
toydataDir
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
Ranges
pileupData = read_pileup(pileupfile=paste0(toydataDir,"/TOY_coverage.txt"),regions=regions,inputType="whole_intron",outputType="part_intron")
data()
data(SCISSOR)
data(toygene_coverage)
ls
ls()
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
regions
?read_BAM
outputType="part_intron"
geneRanges = get_Ranges(Gene="TOY",regions=regions,outputType=outputType)
geneRanges
?plot_pileup
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
dim(pileupData)
dim(toygene_coverage)
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/read_pileup.R', echo=TRUE)
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
?Scissor
help(read_BAM)
toydataDir = system.file("data",package="SCISSOR")
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
dim(toygene_coverage)
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
randomSamples=sample(x=1:ncol(pileupData),size=20)
colnames(pileupData)[2]
caseIDs = colnames(pileupData)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSample)
randomSamples=sample(x=1:ncol(pileupData),size=20)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSample)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
randomSamples=sample(x=1:ncol(pileupData),size=50)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
getwd()
set.seed(0)
randomSamples=sample(x=1:ncol(pileupData),size=50)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
set.seed(1)
randomSamples=sample(x=1:ncol(pileupData),size=50)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
dim(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
caseIDs
caseIDs = colnames(pileupData)
caseIDs
ScissorOutput=Scissor(pileupData=pileupData,Ranges=Ranges)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/plot_ScissorOS.R', echo=TRUE)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
toygene_coverage = toygene_coverage[,-110]
save(toygene_coverage,file="toygene_coverage.RData")
remove.packages(Scissor)
remove.packages("SCISSOR")
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
# pileupData = read_pileup(pileupfile=paste0(toydataDir,"/TOY_coverage.txt"),regions=regions,inputType="whole_intron",outputType="part_intron")
dim(toygene_coverage)
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
library(SCISSOR)
?read_BAM
remove.packages("SCISSOR")
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
dim(toygene_coverage)
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
caseIDs = colnames(pileupData)
set.seed(1)
randomSamples=sample(x=1:ncol(pileupData),size=50)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
par(mfrow=c(1,2),mar=c(2,2,2,2))
?Scissor
ScissorOutput=Scissor(pileupData=pileupData,Ranges=Ranges)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
# pileupData = read_pileup(pileupfile=paste0(toydataDir,"/TOY_coverage.txt"),regions=regions,inputType="whole_intron",outputType="part_intron")
dim(toygene_coverage)
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
caseIDs = colnames(pileupData)
par(mfrow=c(1,2),mar=c(2,2,2,2))
?Scissor
ScissorOutput=Scissor(pileupData=pileupData,Ranges=Ranges)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
order(ScissorOutput$GSCout$OS,decreasing=T)[1:10]
toygene_coverage=toygene_coverage[,-214]
save(toygene_coverage,file="toygene_coverage.RData")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
# pileupData = read_pileup(pileupfile=paste0(toydataDir,"/TOY_coverage.txt"),regions=regions,inputType="whole_intron",outputType="part_intron")
remove.packages("SCISSOR")
if ("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools")}
library(devtools)
install_github("hyochoi/SCISSOR")
library(SCISSOR)
toydataDir = system.file("data",package="SCISSOR")
list.files(toydataDir)
data(toygene_coverage)
regions = "chrQ:7571719-7572198,7574858-7575157,7598088-7598437:-"
# pileupData = read_pileup(pileupfile=paste0(toydataDir,"/TOY_coverage.txt"),regions=regions,inputType="whole_intron",outputType="part_intron")
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
caseIDs = colnames(pileupData)
# set.seed(1)
# randomSamples=sample(x=1:ncol(pileupData),size=50)
# plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
dim(toygene_coverage)
pileupData = build_pileup(Pileup=toygene_coverage,regions=regions,
inputType="whole_intron",outputType="part_intron")
dim(pileupData)
Ranges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
caseIDs = colnames(pileupData)
# set.seed(1)
# randomSamples=sample(x=1:ncol(pileupData),size=50)
# plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples)
par(mfrow=c(1,2),mar=c(2,2,2,2))
ScissorOutput=Scissor(pileupData=pileupData,Ranges=Ranges)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
plot_ScissorOS(object=ScissorOutput,colmat=NULL,textSC=TRUE)
toygene_symbol=Gene
Gene="TOY"
toygene_symbol=Gene
toygene_regions=regions
regions
save(toygene_coverage,toygene_regions,toygene_symbol,file="TOY_data.RData")
dim(pileupData)
head(caseIDs)
list(ScissorOutput)
geneRanges = get_Ranges(Gene="TOY",regions=regions,outputType="part_intron")
ScissorOutput$SC
par(mfrow=c(4,2),mar=c(2,2,2,2))
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=ScissorOutput$SC,
logcount=ScissorOutput$logshiftVal,main="Results")
par(mfrow=c(4,2),mar=c(2,2,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal,main="Results")
}
par(mfrow=c(4,2),mar=c(2,2,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
par(mfrow=c(4,2),mar=c(2,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
par(mfrow=c(4,2),mar=c(3,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/plot_pileup.R', echo=TRUE)
par(mfrow=c(4,2),mar=c(3,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/yaxis.hy.R', echo=TRUE)
par(mfrow=c(4,2),mar=c(3,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/plot_pileup.R', echo=TRUE)
par(mfrow=c(4,2),mar=c(3,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
source('~/Dropbox/Research/hyochoi_github/SCISSOR/R/plot_pileup.R', echo=TRUE)
par(mfrow=c(4,2),mar=c(3,3,2,2))
for (case in ScissorOutput$SC) {
plot_pileup(Pileup=ScissorOutput$logData,Ranges=geneRanges,cases=case,
logcount=ScissorOutput$logshiftVal)
}
set.seed(1)
randomSamples=sample(x=1:ncol(pileupData),size=50)
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples,main="Raw coverage")
par(mfrow=c(1,1))
plot_pileup(Pileup=pileupData,Ranges=Ranges,cases=randomSamples,main="Raw coverage")
plot_pileup(Pileup=log10(pileupData+1),Ranges=Ranges,cases=randomSamples,
main="Log-transformed coverage",logcount=1)
