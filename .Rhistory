return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
rm(list=ls())
library(SCISSOR)
library(OutSiDer)
library(RPlotRNAseq)
library(refGenome)
library(GenomicRanges)
method.dir = paste0("~/Dropbox/Research/Hayes-lab/HNSC_local/method_test/")
SCISSORdir = paste0("~/Dropbox/Research/hyochoi_GitHub/SCISSOR/")
source(paste0(method.dir,"test.R"))
source(paste0(method.dir,"scratch.R"))
source(paste0(SCISSORdir,"R/get_junctions.R"))
source(paste0(SCISSORdir,"R/junction_outliers.R"))
genesetnum = 4
data.dir = paste0("~/Dropbox/Research/Hayes-lab/HNSC_local/validation/simulation_test/GeneSet_",genesetnum,"/")
GeneName = "SPINK7"
load(file=paste0(data.dir,GeneName,"_pileup.RData"))
logshiftVal = 10
siglev = 1e-05
ec=13
AStype = c("ES","IR","AE") # alternative splicing types
outNlevel = c(10,5,1) # number of outliers for each transcript percent level
ATPlevel = c(1,0.5,0.25,0.1) # alternative transcript percent level
experiment_class = paste(rep(paste(rep(AStype,each=length(ATPlevel)),100*ATPlevel,sep=""),each=length(outNlevel)),outNlevel,sep="-")
method.list = c("SCISSOR-G","SCISSOR-L",
"SCISSOR-OLD-G","SCISSOR-OLD-L",
"JRBA-LV1","JRBA-LV12")
siglevlevel = 0.1^(4:15)
sample.list0 = colnames(pileupData0)
regions = Ranges$regions
experiment_results = vector("list",length=length(experiment_class))
experiment_results_siglv = vector("list",length=length(experiment_class))
experiment_tables = vector("list",length=length(experiment_class))
names(experiment_results) = experiment_class
names(experiment_results_siglv) = experiment_class
names(experiment_tables) = experiment_class
expClass = experiment_class[ec]
outType = strsplit(expClass,"-")[[1]][1]
outnum = as.numeric(strsplit(expClass,"-")[[1]][2])
cat(paste(ec,"|",experiment_class[ec]),"\n")
sample.list = sample.list0[c(which(grepl("normal",sample.list0)==T),
which(grepl(paste0(outType,"_"),sample.list0)==T)[1:outnum])]
pileupData = pileupData0[,match(sample.list,sample.list0)]
JSR.count = SR.count0[match(sample.list,sample.list0),]
true.outliers = which(grepl(outType,colnames(pileupData))==T)
jsrCount = data.matrix(JSR.count[,2])
rownames(jsrCount) = JSR.count[,1]
# head(jsrCount)
junction.anno = get_junctions(jsrCount=jsrCount,Ranges=Ranges)
JSR.table = junction.anno$JSR.annotation
JSR.matrix = junction.anno$JSRmat
# Table to save results
resmat = matrix(0,nrow=6,ncol=length(sample.list))
resmat.siglv = vector("list",length=length(method.list))
names(resmat.siglv) = method.list
for (m in 1:length(method.list)) {
resmat.siglv[[m]] = matrix(0,nrow=length(siglevlevel),ncol=length(sample.list))
rownames(resmat.siglv[[m]]) = siglevlevel
colnames(resmat.siglv[[m]]) = sample.list
}
tableList = as.list(NULL)
## %2. SCISSOR - new
st = Sys.time()
data.process = process_pileup(pileupData=pileupData,Ranges=Ranges,
logshiftVal=logshiftVal,
plotNormalization=F)
if (exists(x="normData")) rm(normData)
if (exists(x="logData")) rm(logData)
normData = data.process$normalizedData
logData = data.process$logData
logshiftVal = data.process$logshiftVal  # log shift parameter
cat(paste0("     Log shift parameter used  = ",logshiftVal),"\n")
get_rps = function(X,dir) {
# robust projection scores by projecting X onto dir.
require(MASS)
return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
ec=1
expClass = experiment_class[ec]
outType = strsplit(expClass,"-")[[1]][1]
outnum = as.numeric(strsplit(expClass,"-")[[1]][2])
cat(paste(ec,"|",experiment_class[ec]),"\n")
sample.list = sample.list0[c(which(grepl("normal",sample.list0)==T),
which(grepl(paste0(outType,"_"),sample.list0)==T)[1:outnum])]
pileupData = pileupData0[,match(sample.list,sample.list0)]
JSR.count = SR.count0[match(sample.list,sample.list0),]
true.outliers = which(grepl(outType,colnames(pileupData))==T)
jsrCount = data.matrix(JSR.count[,2])
rownames(jsrCount) = JSR.count[,1]
# head(jsrCount)
junction.anno = get_junctions(jsrCount=jsrCount,Ranges=Ranges)
JSR.table = junction.anno$JSR.annotation
JSR.matrix = junction.anno$JSRmat
# Table to save results
resmat = matrix(0,nrow=6,ncol=length(sample.list))
resmat.siglv = vector("list",length=length(method.list))
names(resmat.siglv) = method.list
for (m in 1:length(method.list)) {
resmat.siglv[[m]] = matrix(0,nrow=length(siglevlevel),ncol=length(sample.list))
rownames(resmat.siglv[[m]]) = siglevlevel
colnames(resmat.siglv[[m]]) = sample.list
}
tableList = as.list(NULL)
## %2. SCISSOR - new
st = Sys.time()
data.process = process_pileup(pileupData=pileupData,Ranges=Ranges,
logshiftVal=logshiftVal,
plotNormalization=F)
if (exists(x="normData")) rm(normData)
if (exists(x="logData")) rm(logData)
normData = data.process$normalizedData
logData = data.process$logData
logshiftVal = data.process$logshiftVal  # log shift parameter
cat(paste0("     Log shift parameter used  = ",logshiftVal),"\n")
get_rps = function(X,dir) {
# robust projection scores by projecting X onto dir.
require(MASS)
return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
ec=4
expClass = experiment_class[ec]
outType = strsplit(expClass,"-")[[1]][1]
outnum = as.numeric(strsplit(expClass,"-")[[1]][2])
cat(paste(ec,"|",experiment_class[ec]),"\n")
sample.list = sample.list0[c(which(grepl("normal",sample.list0)==T),
which(grepl(paste0(outType,"_"),sample.list0)==T)[1:outnum])]
pileupData = pileupData0[,match(sample.list,sample.list0)]
JSR.count = SR.count0[match(sample.list,sample.list0),]
true.outliers = which(grepl(outType,colnames(pileupData))==T)
jsrCount = data.matrix(JSR.count[,2])
rownames(jsrCount) = JSR.count[,1]
# head(jsrCount)
junction.anno = get_junctions(jsrCount=jsrCount,Ranges=Ranges)
JSR.table = junction.anno$JSR.annotation
JSR.matrix = junction.anno$JSRmat
# Table to save results
resmat = matrix(0,nrow=6,ncol=length(sample.list))
resmat.siglv = vector("list",length=length(method.list))
names(resmat.siglv) = method.list
for (m in 1:length(method.list)) {
resmat.siglv[[m]] = matrix(0,nrow=length(siglevlevel),ncol=length(sample.list))
rownames(resmat.siglv[[m]]) = siglevlevel
colnames(resmat.siglv[[m]]) = sample.list
}
tableList = as.list(NULL)
## %2. SCISSOR - new
st = Sys.time()
data.process = process_pileup(pileupData=pileupData,Ranges=Ranges,
logshiftVal=logshiftVal,
plotNormalization=F)
if (exists(x="normData")) rm(normData)
if (exists(x="logData")) rm(logData)
normData = data.process$normalizedData
logData = data.process$logData
logshiftVal = data.process$logshiftVal  # log shift parameter
cat(paste0("     Log shift parameter used  = ",logshiftVal),"\n")
get_rps = function(X,dir) {
# robust projection scores by projecting X onto dir.
require(MASS)
return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
ec
ec=6
expClass = experiment_class[ec]
outType = strsplit(expClass,"-")[[1]][1]
outnum = as.numeric(strsplit(expClass,"-")[[1]][2])
cat(paste(ec,"|",experiment_class[ec]),"\n")
sample.list = sample.list0[c(which(grepl("normal",sample.list0)==T),
which(grepl(paste0(outType,"_"),sample.list0)==T)[1:outnum])]
pileupData = pileupData0[,match(sample.list,sample.list0)]
JSR.count = SR.count0[match(sample.list,sample.list0),]
true.outliers = which(grepl(outType,colnames(pileupData))==T)
jsrCount = data.matrix(JSR.count[,2])
rownames(jsrCount) = JSR.count[,1]
# head(jsrCount)
junction.anno = get_junctions(jsrCount=jsrCount,Ranges=Ranges)
JSR.table = junction.anno$JSR.annotation
JSR.matrix = junction.anno$JSRmat
# Table to save results
resmat = matrix(0,nrow=6,ncol=length(sample.list))
resmat.siglv = vector("list",length=length(method.list))
names(resmat.siglv) = method.list
for (m in 1:length(method.list)) {
resmat.siglv[[m]] = matrix(0,nrow=length(siglevlevel),ncol=length(sample.list))
rownames(resmat.siglv[[m]]) = siglevlevel
colnames(resmat.siglv[[m]]) = sample.list
}
tableList = as.list(NULL)
## %2. SCISSOR - new
st = Sys.time()
data.process = process_pileup(pileupData=pileupData,Ranges=Ranges,
logshiftVal=logshiftVal,
plotNormalization=F)
if (exists(x="normData")) rm(normData)
if (exists(x="logData")) rm(logData)
normData = data.process$normalizedData
logData = data.process$logData
logshiftVal = data.process$logshiftVal  # log shift parameter
cat(paste0("     Log shift parameter used  = ",logshiftVal),"\n")
get_rps = function(X,dir) {
# robust projection scores by projecting X onto dir.
require(MASS)
return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
ec
outputDirName = "output_20200510"
unlist(strsplit(outputDirName,"_"))[2]
genesetnum = 8
data.dir = paste0("~/Dropbox/Research/Hayes-lab/HNSC_local/validation/simulation_test/GeneSet_",genesetnum,"/")
GeneName = "SPHK1"
load(file=paste0(data.dir,GeneName,"_pileup.RData"))
logshiftVal = 10
siglev = 1e-05
method.dir = paste0("~/Dropbox/Research/Hayes-lab/HNSC_local/method_test/")
SCISSORdir = paste0("~/Dropbox/Research/hyochoi_GitHub/SCISSOR/")
source(paste0(method.dir,"test.R"))
source(paste0(method.dir,"scratch.R"))
source(paste0(SCISSORdir,"R/get_junctions.R"))
source(paste0(SCISSORdir,"R/junction_outliers.R"))
# rm(list=ls())
genesetnum = 8
data.dir = paste0("~/Dropbox/Research/Hayes-lab/HNSC_local/validation/simulation_test/GeneSet_",genesetnum,"/")
GeneName = "SPHK1"
load(file=paste0(data.dir,GeneName,"_pileup.RData"))
logshiftVal = 10
siglev = 1e-05
ec=13
AStype = c("ES","IR","AE") # alternative splicing types
outNlevel = c(10,5,1) # number of outliers for each transcript percent level
ATPlevel = c(1,0.5,0.25,0.1) # alternative transcript percent level
experiment_class = paste(rep(paste(rep(AStype,each=length(ATPlevel)),100*ATPlevel,sep=""),each=length(outNlevel)),outNlevel,sep="-")
method.list = c("SCISSOR-G","SCISSOR-L",
"SCISSOR-OLD-G","SCISSOR-OLD-L",
"JRBA-LV1","JRBA-LV12")
siglevlevel = 0.1^(4:15)
sample.list0 = colnames(pileupData0)
regions = Ranges$regions
experiment_results = vector("list",length=length(experiment_class))
experiment_results_siglv = vector("list",length=length(experiment_class))
experiment_tables = vector("list",length=length(experiment_class))
names(experiment_results) = experiment_class
names(experiment_results_siglv) = experiment_class
names(experiment_tables) = experiment_class
expClass = experiment_class[ec]
outType = strsplit(expClass,"-")[[1]][1]
outnum = as.numeric(strsplit(expClass,"-")[[1]][2])
cat(paste(ec,"|",experiment_class[ec]),"\n")
sample.list = sample.list0[c(which(grepl("normal",sample.list0)==T),
which(grepl(paste0(outType,"_"),sample.list0)==T)[1:outnum])]
pileupData = pileupData0[,match(sample.list,sample.list0)]
JSR.count = SR.count0[match(sample.list,sample.list0),]
true.outliers = which(grepl(outType,colnames(pileupData))==T)
jsrCount = data.matrix(JSR.count[,2])
rownames(jsrCount) = JSR.count[,1]
# head(jsrCount)
junction.anno = get_junctions(jsrCount=jsrCount,Ranges=Ranges)
JSR.table = junction.anno$JSR.annotation
JSR.matrix = junction.anno$JSRmat
# Table to save results
resmat = matrix(0,nrow=6,ncol=length(sample.list))
resmat.siglv = vector("list",length=length(method.list))
names(resmat.siglv) = method.list
for (m in 1:length(method.list)) {
resmat.siglv[[m]] = matrix(0,nrow=length(siglevlevel),ncol=length(sample.list))
rownames(resmat.siglv[[m]]) = siglevlevel
colnames(resmat.siglv[[m]]) = sample.list
}
tableList = as.list(NULL)
## %2. SCISSOR - new
st = Sys.time()
data.process = process_pileup(pileupData=pileupData,Ranges=Ranges,
logshiftVal=logshiftVal,
plotNormalization=F)
if (exists(x="normData")) rm(normData)
if (exists(x="logData")) rm(logData)
normData = data.process$normalizedData
logData = data.process$logData
logshiftVal = data.process$logshiftVal  # log shift parameter
cat(paste0("     Log shift parameter used  = ",logshiftVal),"\n")
get_rps = function(X,dir) {
# robust projection scores by projecting X onto dir.
require(MASS)
return(apply(X,2,FUN=function(t){rlm(t ~ dir - 1, psi=psi.bisquare)$coefficients}))
}
z.pca = pca.hy(normData,subt.mean=F)
pc.j = which(apply(z.pca$projmat[1:5,],1,FUN=function(t){max(abs(correct_PO(pd.rate.hy(x=t,qrsc=T))))})<5)
rprojmat = apply(matrix(z.pca$dirmat[,pc.j],ncol=length(pc.j)),2,
FUN=function(t){get_rps(X=normData,dir=t)})
normData = normData - z.pca$dirmat[,pc.j]%*%t(rprojmat)
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=2,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
siglev
set.seed(0)
## %2-1. SCISSOR - new - global
globalResult = miscGlobal_test5(siglev=siglev,ADcutoff=4,AToutlier=F,
inputData=normData,pileupData=pileupData,
Ranges=Ranges,JSR.table=JSR.table,print.proc=F)
globalResult$table
false.outliers = globalResult$Outlier[which(! globalResult$Outlier %in% true.outliers)]
cat(paste("\t NEW SCISSOR :"),"\n")
cat(paste0("\t # Global shape changes = ",length(globalResult$table$Outlier),
" (",vec2text.hy(globalResult$table$Outlier),")"),"\n")
inputData=normData
ADcutoff=2
n = dim(inputData)[2]
plat.table = build_blockTable(Ranges=Ranges)
plat.baseMat = build_baseMat(plat.table)
size.adjMat = sqrt(t(plat.baseMat)%*%plat.baseMat)
# Estimate exons
exonlabels = label_exons(pileupData=pileupData,Ranges=Ranges)
estexons = names(which(exonlabels==1))
knownDir = build_knownDir(plat.table=plat.table,Ranges=Ranges,JSR.table=JSR.table,exons=estexons)
adj.knownDir = size.adjMat%*%knownDir # adjust size of plats
plat.names = rownames(knownDir)
plat.names2 = sapply(plat.names,FUN=function(t){unlist(strsplit(t,"[.]"))[1]})
platBasisDir = apply(plat.baseMat,2,get_unitdir)
KnownBasisDir = apply(plat.baseMat%*%knownDir,2,get_unitdir)
normProjData = t(platBasisDir) %*% inputData # low-dimensional data object to be used for outlier detection
# normProjData = t(apply(normProjData,1,make_normal))
## 1. Detecting outliers from known directions
## 1-1. Get projection outlyingness
# Get primary projection outlyingness
knownPOmat = get_POgivenB2(X=normProjData,B=adj.knownDir,qrsc=TRUE,ADcutoff=ADcutoff)
knownPO = diag(knownPOmat[apply(abs(knownPOmat),2,which.max),])
# knownPODir = knownDir[,apply(abs(knownPOmat),2,which.max)]
knownPO[true.outliers]
intron.nonout = get_intron_nonout(pileupData=pileupData,Range=Ranges)
exon.nonout = get_exon_nonout(normData=inputData,POmat=knownPOmat,Ranges=Ranges,plat.table=plat.table)
intron.nonout[,true.outliers]
n = ncol(pileupData)
exonlabels = label_exons(pileupData=pileupData,Ranges=Ranges)
exonset = Ranges$lRanges
nexon = nrow(exonset)
medianmat = matrix(0,nrow=(nexon-1),ncol=n)
i=1
carea = c((exonset[i,3]+1):(exonset[(i+1),2]-1))
(length(carea)>20)
(! i %in% which(exonlabels==1))
exonlabels
logData = log10(pileupData+10) - 1
meanlogData = apply(logData,1,function(x) mean(x,trim=0.1))
nexons = nrow(Ranges$lRanges)
constexons = rep(1,nexons)
names(constexons) = paste("E",1:nexons,sep="")
nexons
(nexons > 3)
meanlogExon = sapply(1:nexons,function(x) mean(meanlogData[Ranges$lRanges[x,2]:Ranges$lRanges[x,3]]))
meanlogExon
mad(meanlogExon)
stdresd = (meanlogExon-median(meanlogExon))/mad(meanlogExon)
stdresd
(length(which(stdresd<(-5)))<(0.5*nexons))
stdresd
constexons
nexons
meanlogExon = sapply(1:nexons,function(x) mean(meanlogData[Ranges$lRanges[x,2]:Ranges$lRanges[x,3]]))
if (mad(meanlogExon)>1e-05) {
stdresd = (meanlogExon-median(meanlogExon))/mad(meanlogExon)
if (length(which(stdresd<(-5)))<(0.5*nexons)) constexons[which(stdresd<(-5))] = 0
if (stdresd[1] > -10) constexons[1] = 1
if (stdresd[nexons] > -10) constexons[nexons] = 1
}
constexons
list2data.frame = function(x,colname=NULL,addlistrow=F) {
# x: list
# if (! length(unique(sapply(x,nrow)))==1) {
#   stop("number of rows in lists must be same")
# }
bindlist = do.call(rbind,x)
listname = rep(names(x),sapply(x,nrow))
if (addlistrow) {
listrow = rownames(bindlist)
bindlist2 = data.frame(bindlist,listname,listrow)
} else {
bindlist2 = data.frame(bindlist,listname)
}
if (!is.null(colname)) {
colnames(bindlist2) = sub(pattern="listname",replacement=colname,colnames(bindlist2))
}
rownames(bindlist2) = NULL
return(bindlist2)
}
testrate = function(x) {
TP = x[1]
TN = x[2]
FP = x[3]
FN = x[4]
TPR = TP/(TP+FN) # true positive rate / sensitivity
TNR = TN/(TN+FP) # true negative rate / specificity
PPV = TP/(TP+FP) # positive predictive value / precision
FDR = 1-PPV
y = unlist(c(TPR,TNR,PPV,FDR))
names(y) = c("TPR","TNR","PPV","FDR")
return(y)
}
# testrate(list2[1,1:4])
read_output2dataframe = function(output) {
load(file=output)
genelist=names(ctgcTable)
results.list = vector("list",length=length(ctgcTable))
names(results.list) = genelist
for (ig in 1:length(ctgcTable)) {
result = tryCatch({
list1 = lapply(ctgcTable[[ig]],function(x) list2data.frame(x=x,colname="siglev",addlistrow=T))
list2 = list2data.frame(x=list1,colname="method")
rates = round(t(apply(list2[,c(1:4)],1,testrate)),digits=3)
list3 = cbind(rates,list2)
results.list[[ig]] = list3
},error=function(err) {
cat(paste(ig,"|",genelist[ig],"|",err),"\n")
})
}
results = list2data.frame(x=results.list[-which(sapply(results.list,is.null)==T)],colname="Gene")
colnames(results) = sub(pattern="listrow",replacement="expClass",colnames(results))
return(results)
}
genesetnum = 8
outputDirname = "output_20200513"
base = "/datastore/primary/UTHSC/Current_members/Hyoyoung_Choi/HNSC/base/"
parDir = "/datastore/primary/UTHSC/Current_members/Hyoyoung_Choi/HNSC/analysis/simulation/"
simDir = paste0(parDir,"simulated_data/")
dataDir = paste0(parDir,"data/")
scriptDir = paste0(parDir,"scripts/")
genesetDirname = paste0("GeneSet_",genesetnum)
genesetDir = paste0(simDir,genesetDirname,"/")
outputfilename = paste0(genesetDirname,"_",outputDirname,"_contingencyTable.RData")
outputfile = paste0(genesetDir,outputfilename)
outputfile
